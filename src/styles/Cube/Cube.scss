@use 'sass:math';
@use 'sass:string';
@import '../Tool/mixins';
@import '../Tool/variables';

$cubeDesktop: 400px;

.cube__container,
.cube {
    width: $cubeDesktop;
    height: $cubeDesktop;
    transform-style: preserve-3d;

    @media (max-width: 768px) {
        width: 100%;
        height: auto;
        transform-style: initial;
    }
}

.cube__container {
    @include flexContainer(column, center, flex-start, wrap);
    perspective: math.div($cubeDesktop * 12, 3); //ou * 4

    @media (max-width: 768px) {
        perspective: none;
    }
}

.cube {
    position: relative;
    transition: transform 1s ease-in-out;
    will-change: transform;

    @media (max-width: 768px) {
        transition: none;
    }

    //FACE
    &__side {
        display: flex;
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        position: absolute;
        border: 10px double $lightblue;
        padding: 0 20px 0;
        opacity: 1;
        will-change: transform;

        @media (max-width: 768px) {
            position: relative;
            transition: none;
            border: 0;
            will-change: initial;
        }

        &--front {
            transform: translateZ(math.div($cubeDesktop, 2) + 13px);

            @media (max-width: 768px) {
                transform: none;
            }
        }

        &--back {
            transform: rotateY(180deg)
                translateZ(math.div($cubeDesktop, 2) + 13px);

            @media (max-width: 768px) {
                transform: none;
            }
        }

        &--left {
            transform: rotateY(-90deg)
                translateZ(math.div($cubeDesktop, 2) + 13px);

            @media (max-width: 768px) {
                transform: none;
            }
        }

        &--right {
            transform: rotateY(90deg)
                translateZ(math.div($cubeDesktop, 2) + 13px);

            @media (max-width: 768px) {
                transform: none;
            }
        }

        &--top {
            transform: rotateX(90deg)
                translateZ(math.div($cubeDesktop, 2) + 13px);

            @media (max-width: 768px) {
                transform: none;
            }
        }

        &--bottom {
            transform: rotateX(-90deg)
                translateZ(math.div($cubeDesktop, 2) + 13px);

            @media (max-width: 768px) {
                transform: none;
            }
        }

        //BORDER EXTERNE TOP
        &::before {
            display: block;
            content: '';
            position: absolute;
            top: -19px;
            left: -19px;
            background-color: $lightblue;
            width: 200px;
            height: 10px;
            clip-path: polygon(0 0, 97% 0, 100% 100%, 0% 100%);

            @media (max-width: 768px) {
                display: none;
            }
        }

        //BORDER EXTERNE LEFT
        &::after {
            display: block;
            content: '';
            position: absolute;
            top: -10px;
            left: -19px;
            background-color: $lightblue;
            width: 10px;
            height: 100px;
            clip-path: polygon(
                0px 0px,
                100% 0px,
                100% 90%,
                100% 90%,
                16px 103.67%,
                0% 89.27%
            );

            @media (max-width: 768px) {
                display: none;
            }
        }

        @media (max-width: 768px) {
            backface-visibility: hidden;
        }
    }
}

//OPACITÃ‰ DES FACES INACTIVES
@media (min-width: 768px) {
    .opaque {
        opacity: 0.15;
    }
}

@media (max-width: 767.98px) {
    .opaque {
        display: none;
    }
}s

.rotation--front {
    @media (min-width: 768px) {
        transform: rotateX(0deg) rotateY(0deg);
    }
}

.rotation--back {
    @media (min-width: 768px) {
        transform: rotateX(0deg) rotateY(180deg);
    }
}

.rotation--left {
    @media (min-width: 768px) {
        transform: rotateX(0deg) rotateY(90deg);
    }
}

.rotation--right {
    @media (min-width: 768px) {
        transform: rotateX(0deg) rotateY(-90deg);
    }
}

.rotation--top {
    @media (min-width: 768px) {
        transform: rotateX(-90deg) rotateY(0deg);
    }
}

.rotation--bottom {
    @media (min-width: 768px) {
        transform: rotateX(90deg) rotateY(0deg);
    }
}

@media (max-width: 768px) {
    .miroir {
        transform: translateX(180deg);
    }
}
